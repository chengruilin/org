#+TITLE: My Notes
#+TAGS: @develop(d) @note(n)

* Quick notes

** Android 模块化分模块打包数据共享机制                              :@note:
  [2018-09-29 六 10:58]
  通过壳 App 和 Module App 校验签名,共享 accessToken 和账户以及店铺信息
   #+BEGIN_SRC java
     public class SignCheck {
         private Context context;
         private String cer = null;
         private String realCer = null;
         private static final String TAG = "SignCheck";

         public SignCheck(Context context) {
             this.context = context;
             this.cer = getCertificateSHA1Fingerprint();
         }

         public SignCheck(Context context, String realCer) {
             this.context = context;
             this.realCer = realCer;
             this.cer = getCertificateSHA1Fingerprint();
         }

         public String getRealCer() {
             return realCer;
         }

         /**
          ,* 设置正确的签名
          ,*
          ,* @param realCer
          ,*/
         public void setRealCer(String realCer) {
             this.realCer = realCer;
         }

         /**
          ,* 获取应用的签名
          ,*
          ,* @return
          ,*/
         public String getCertificateSHA1Fingerprint() {
             //获取包管理器
             PackageManager pm = context.getPackageManager();

             //获取当前要获取 SHA1 值的包名，也可以用其他的包名，但需要注意，
             //在用其他包名的前提是，此方法传递的参数 Context 应该是对应包的上下文。
             String packageName = context.getPackageName();

             //返回包括在包中的签名信息
             int flags = PackageManager.GET_SIGNATURES;

             PackageInfo packageInfo = null;

             try {
                 //获得包的所有内容信息类
                 packageInfo = pm.getPackageInfo(packageName, flags);
             } catch (PackageManager.NameNotFoundException e) {
                 e.printStackTrace();
             }

             //签名信息
             Signature[] signatures = packageInfo.signatures;
             byte[] cert = signatures[0].toByteArray();

             //将签名转换为字节数组流
             InputStream input = new ByteArrayInputStream(cert);

             //证书工厂类，这个类实现了出厂合格证算法的功能
             CertificateFactory cf = null;

             try {
                 cf = CertificateFactory.getInstance("X509");
             } catch (Exception e) {
                 e.printStackTrace();
             }

             //X509 证书，X.509 是一种非常通用的证书格式
             X509Certificate c = null;

             try {
                 c = (X509Certificate) cf.generateCertificate(input);
             } catch (Exception e) {
                 e.printStackTrace();
             }

             String hexString = null;

             try {
                 //加密算法的类，这里的参数可以使 MD4,MD5 等加密算法
                 MessageDigest md = MessageDigest.getInstance("SHA1");

                 //获得公钥
                 byte[] publicKey = md.digest(c.getEncoded());

                 //字节到十六进制的格式转换
                 hexString = byte2HexFormatted(publicKey);

             } catch (NoSuchAlgorithmException e1) {
                 e1.printStackTrace();
             } catch (CertificateEncodingException e) {
                 e.printStackTrace();
             }
             return hexString;
         }

         //这里是将获取到得编码进行 16 进制转换
         private String byte2HexFormatted(byte[] arr) {

             StringBuilder str = new StringBuilder(arr.length * 2);

             for (int i = 0; i <arr.length; i++) {
                 String h = Integer.toHexString(arr[i]);
                 int l =h.length();
                 if (l == 1)
                     h = "0" + h;
                 if (l > 2)
                     h = h.substring(l - 2, l);
                 str.append(h.toUpperCase());
                 if (i < (arr.length - 1))
                     str.append(':');
             }
             return str.toString();
         }

         /**
          ,* 检测签名是否正确
          ,* @return true 签名正常 false 签名不正常
          ,*/
         public boolean check() {

             if (this.realCer != null) {
                 cer = cer.trim();
                 realCer = realCer.trim();
                 if (this.cer.equals(this.realCer)) {
                     return true;
                 }
             }else {
                 Log.e(TAG, "未给定真实的签名 SHA-1 值");
             }
             return false;
         }
     }
   #+END_SRC

** grep 查找文件内容                                                 :@note:
  [2018-10-09 二 15:14]
  
*** 基础用法

    简单用法(查找 fruitlist.txt 中的 apple 字符串):
    #+BEGIN_SRC shell
      grep apple fruitlist.txt
    #+END_SRC

    忽略大小写(-i):
    #+BEGIN_SRC shell
      grep -i apple fruitlist.txt
    #+END_SRC

    搜索目录里的所有文件(包括子目录):
    #+BEGIN_SRC shell
      grep -nr apple *
    #+END_SRC

*** 高级用法
    
    #+NAME: grep 相关参数
    | argument | description                                            | example                 |
    |----------+--------------------------------------------------------+-------------------------|
    | -A       | --after-context=num:在结果中同时输出匹配之后的 num 行  | grep -A 100 apple a.txt |
    | -B       | --before-context=num:在结果中同时输出匹配之前的 num 行 | grep -B 100 apple a.txt |
    | -i       | --ignore-case:忽略大小写                               | grep -i apple a.txt     |
    | -R, -r   | --recursive:递归搜索子目录                             | grep -r apple /src      |
    | -n       | --line-number:显示行号                                 | grep -n apple a.txt     |
    | -v       | --invert-match:输出没有匹配的行                        |                         |

    使用管道:
    #+BEGIN_SRC sh
      ## 想查找包含 apple 的行,又想过滤掉 pineapple
      grep apple fruitlist.txt | grep -v pineapple

      ## 保存搜索结果
      grep apple fruitlist.txt | grep -v pineapple > apples.txt
    #+END_SRC
